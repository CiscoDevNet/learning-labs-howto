What is a Learning Lab?

Learning Labs are intended to be relatively short self-paced exercises to introduce someone to developer-oriented technologies. They can encompass basic developer tooling such as Postman and
Git, but typically the intention is to teach about Cisco developer technologies (APIs, SDK, etc.). A lab should take someone from start to completion on the low end 15 minutes, and on
the longer end 40 minutes. We recommend that you include at least a beginner lab that will give a sense of the technology because we have a mixed audience, many of which are new to
programming. You can build up complex labs as well so long as they don't take longer than about 40 minutes.

These labs are intended to be available on the Internet under a creative commons license. If special hardware is needed for your learning lab we can work with you and have your lab
available either in the DevNet Sandbox or within a DMZ network with Internet exposure. This will be considered on a case by case basis. Please reach out to the DevNet team either through
email, forums or live chat in Cisco Spark. More information can be found at https://developer.cisco.com.

In order to better organize the learning labs and address a specific technology in more depth, we have the concept of learning tracks and modules. One or more learning labs that pertain to
the same technology are combined in learning modules. A combination of multiple modules intended for the same audience is organized in a learning track.

For example, we have the Network Programmability for Network Engineers learning track consisting of 3 learning modules. The first module covers programming foundation topics
related to network programmability like REST API basics and making API calls from Python. Once the basic concepts were introduced in the first module, the second module goes a step further
and covers in detail NETCONF and RESTCONF within 5 learning labs. The third and last module of this specific learning track, covers SDN and Cisco Network Controllers. We found that
organizing learning labs this way is much more useful and we can address the right audience for each track.

If you want to create code examples that the developer can run on a workstation, please make sure you read the section on code examples later in this guide.

A Note on Repos

The official repos for the learning labs content is under: https://github.com/CiscoDevNet/. You will need to have a github.com account to create learning labs. You also need to get in contact with
the DevNet team to be added to the DevNet group in github. You can contact the DevNet team at https://developer.cisco.com/contactUs or in the Cisco Spark DevNet Dev Support Questions room found at
this link https://developer.cisco.com/site/spark-chat/.


Getting Started

You can utilize a yeoman generator to scaffold your project (https://github.com/CiscoDevNet/generator-devnet-learninglabs).
You'll want to set up the structure of your learning labs project, which will resemble this:

├── labs
│   ├── sample-lab
│   │   ├── assets
│   │   │   ├── images
│   │   │   └── custom-json.json
│   │   ├── samples
│   │   │   └── sample-html-project  <--  (See Note 1 below)
│   │   ├── 1.md
│   │   ├── 2.md
│   │   ├── 3.md
│   │   ├── 4.md
│   │   ├── 5.md
│   │   ├── byod.html
|		|		└── sample-lab.json

Details on the byod.html and sample-lab.json follow this section. There is an annotated version of the sample-lab.json that will provide you with details for each JSON property and
its use.

Once you have created the basic structure, you should start using git to start tracking your changes. In order to publish into the learning labs platform, you will need to push to a
GitHub repository (public or private). Currently, you'll have to work with the learning labs managers to actually gain access and publish.

assets and samples directories

Use the assets and samples directories as follows:

    assets is to be used for images for your lab.
    samples is to be used for any web page apps you want to include as part of your lab.

Lab Template

In the official repo, under the labs/sample-lab directory, you will find a small example of a lab. This should streamline lab creation for most lab creators. Copy the sample-lab folder
with a new name to start a new project (e.g. cmx). You also need to rename sample-lab.json to your lab name (e.g. cmx.json).

You can utilize a yeoman generator to scaffold your project.

Lab Authoring

Lab content is created in Markdown format. See this site for detailed syntax documentation. As an aside, Markdown is fairly flexible, and so you can also include arbitrary HTML. The
markdown files are dynamically converted to HTML when the lab is loaded. Visit http://learninglabs.cisco.com to see examples.

There are many Markdown editors & previewers for Mac or Windows. Using one of them may help you with formatting. I've been using Byword on the Mac, but Sublime Text, Text Mate support
Markdown. MacDown and Mou are free editors.

Common Markdown syntax:

    To insert an image: ![Figure](/posts/files/cmx/postmanlaunch.png)
    Separate code examples with a bactick (`)
    <h1> corresponds to #, <h2> to ##, <h3> to ###, and so on

A note on image paths -- If you are authoring outside of the learning labs application by just using a markdown editor, you will need to update your image paths to be
posts/files/<labid>/<image-name> so that they will render properly when loaded in the context of the lab application. Also, please try to follow best practices in image file size,
by attempting to make them as small as possible. A service like tinypng can be useful.

Lab content files

As mentioned above, there is a specific structure you need to use.

    Lab content is in this repository in the /labs directory.
    The labId is used as the folder name for the lab, and the labs should be broken into individual markdown files numbered 1.md, 2.md, etc. corresponding to the lab step.
    You need to follow the sample lab layout below:

├── labs
│   ├── sample-lab
│   │   ├── assets
│   │   │   ├── images
│   │   │   └── custom-json.json
│   │   ├── samples
│   │   │   └── sample-html-project  <--  (See Note 1 below)
│   │   ├── 1.md
│   │   ├── 2.md
│   │   ├── 3.md
│   │   ├── 4.md
│   │   ├── 5.md
│   │   ├── byod.html
|		|		└── sample-lab.json

Note 1: If you have a lab that uses an example web page for demonstrating a JavaScript library, for example. You need to include it in the labs/sample-lab/samples directory. You
should also link to CDN versions of dependencies like jQuery rather than bundling those into your project.

BYOD Information

To enable people to complete Learning Labs outside of an event, such as at their hotel room or at home, you can include "bring your own device" information in the lab by including a file
called byod.html in your directory. Author this content in HTML. This will be displayed as an "accordion" element at the top of your lab. Enable this by setting your lab JSON file property
"byod": true.

Example file dmo.json:

{
  "labId": "dmo",
  "files": [
    {"title": "1.md"},
    {"title": "2.md"},
    {"title": "3.md"},
    {"title": "4.md"},
    {"title": "5.md"}
  ],
	"tags": [
		{"title" : "IoT"},
		{"title": "Python"},
		{"title": "Beginner"}
	],
  "byod": true,
	"authors": [
		{"name": "", "email": ""}
	]
}

Related Labs

To display related labs on the completed page, you can reference other labs by adding a JSON array named related. You can determine the related lab ID to use by looking at the URL for a
given lab. The lab ID is contained in the path between labs/ and step. Example:

#/labs/cmx/step/1 where cmx is the lab ID.

Example file apic-em-basic.json:

{
  "labId": "apic-em-basic",
  "files": [
    {"title": "1.md"}
  ],
  "related": [
    {
      "labId": "apic-em",
      "title": "APIC-EM with Python"
    },
    {
      "labId": "apic-hunt",
      "title": "APIC-EM Treasure Hunt"
    }
  ]
}

Code examples

If your lab contains code examples, you should create a git project with your sample code. These examples will be hosted somewhere (GitHub), so that we can have lab participants
checkout appropriate tags and work in a read-only mode. You should include commentary in your lab on how to checkout the appropriate step. The Angular JS tutorial is a good example of how
to do this.

Note: See the example in the labs/sample-lab directory.

Video files

If you'd like to include video files, you can use the HTML5 syntax like this. Since video files can be large, please work with the DevNet team to figure out the best way to add these to
the repository and site.

<video poster="posts/files/virl/images/ml.02.png" width="480" height="300" none controls>

<source src="/virl-static/ml.02.mp4" type="video/mp4"> </video>
